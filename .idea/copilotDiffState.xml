<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.mate11&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.mate11&quot;&#10;        minSdk = 33&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        prefab = true&#10;    }&#10;    externalNativeBuild {&#10;        cmake {&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#10;            version = &quot;3.22.1&quot;&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.games.activity)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;&#10;    // Jetpack Compose&#10;    implementation(&quot;androidx.activity:activity-compose:1.8.2&quot;)&#10;    implementation(&quot;androidx.compose.ui:ui:1.6.7&quot;)&#10;    implementation(&quot;androidx.compose.material3:material3:1.2.1&quot;)&#10;    implementation(&quot;androidx.compose.foundation:foundation:1.6.7&quot;)&#10;    implementation(&quot;androidx.compose.ui:ui-tooling-preview:1.6.7&quot;)&#10;    debugImplementation(&quot;androidx.compose.ui:ui-tooling:1.6.7&quot;)&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.7.7&quot;)&#10;&#10;    // DataStore Preferences&#10;    implementation(&quot;androidx.datastore:datastore-preferences:1.1.1&quot;)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.mate11&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.mate11&quot;&#10;        minSdk = 33&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        prefab = true&#10;    }&#10;    externalNativeBuild {&#10;        cmake {&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#10;            version = &quot;3.22.1&quot;&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.games.activity)&#10;&#10;    // Jetpack Compose&#10;    implementation(&quot;androidx.activity:activity-compose:1.8.2&quot;)&#10;    implementation(&quot;androidx.compose.ui:ui:1.6.7&quot;)&#10;    implementation(&quot;androidx.compose.material3:material3:1.2.1&quot;)&#10;    implementation(&quot;androidx.compose.foundation:foundation:1.6.7&quot;)&#10;    implementation(&quot;androidx.compose.ui:ui-tooling-preview:1.6.7&quot;)&#10;    debugImplementation(&quot;androidx.compose.ui:ui-tooling:1.6.7&quot;)&#10;    implementation(&quot;androidx.navigation:navigation-compose:2.7.7&quot;)&#10;&#10;    // DataStore Preferences&#10;    implementation(&quot;androidx.datastore:datastore-preferences:1.1.1&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/mate11/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/mate11/MainActivity.kt" />
              <option name="originalContent" value="package com.example.mate11&#10;&#10;import android.os.Bundle&#10;import android.view.View&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import com.google.androidgamesdk.GameActivity&#10;&#10;class MainActivity : GameActivity() {&#10;    companion object {&#10;        init {&#10;            System.loadLibrary(&quot;mate11&quot;)&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            Mate11Theme {&#10;                Mate11App()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onWindowFocusChanged(hasFocus: Boolean) {&#10;        super.onWindowFocusChanged(hasFocus)&#10;        if (hasFocus) {&#10;            hideSystemUi()&#10;        }&#10;    }&#10;&#10;    private fun hideSystemUi() {&#10;        val decorView = window.decorView&#10;        decorView.systemUiVisibility = (View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY&#10;                or View.SYSTEM_UI_FLAG_LAYOUT_STABLE&#10;                or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION&#10;                or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN&#10;                or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION&#10;                or View.SYSTEM_UI_FLAG_FULLSCREEN)&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Mate11App() {&#10;    val navController = rememberNavController()&#10;    NavHost(navController = navController, startDestination = &quot;welcome&quot;) {&#10;        composable(&quot;welcome&quot;) {&#10;            WelcomeScreen(&#10;                onTableSelected = { table -&gt;&#10;                    navController.navigate(&quot;table/$table&quot;)&#10;                },&#10;                onStoryMode = { navController.navigate(&quot;story&quot;) },&#10;                onChapterSelect = { navController.navigate(&quot;chapter&quot;) }&#10;            )&#10;        }&#10;        composable(&#10;            route = &quot;table/{table}&quot;,&#10;            arguments = listOf(navArgument(&quot;table&quot;) { type = NavType.IntType })&#10;        ) { backStackEntry -&gt;&#10;            val table = backStackEntry.arguments?.getInt(&quot;table&quot;) ?: 2&#10;            TableScreen(table = table, onBack = { navController.popBackStack() })&#10;        }&#10;        composable(&quot;story&quot;) {&#10;            StoryModeScreen(onBack = { navController.popBackStack() })&#10;        }&#10;        composable(&quot;chapter&quot;) {&#10;            ChapterSelectScreen(onBack = { navController.popBackStack() })&#10;        }&#10;    }&#10;}&#10;&#10;// ... Mate11Theme y otras pantallas se definen en otros archivos ...&#10;" />
              <option name="updatedContent" value="package com.example.mate11&#10;&#10;import android.os.Bundle&#10;import android.view.View&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import com.google.androidgamesdk.GameActivity&#10;&#10;// Cambia la herencia de GameActivity a ComponentActivity para evitar conflictos con Compose&#10;class MainActivity : ComponentActivity() {&#10;    companion object {&#10;        init {&#10;            System.loadLibrary(&quot;mate11&quot;)&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            Mate11Theme {&#10;                Mate11App()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onWindowFocusChanged(hasFocus: Boolean) {&#10;        super.onWindowFocusChanged(hasFocus)&#10;        if (hasFocus) {&#10;            hideSystemUi()&#10;        }&#10;    }&#10;&#10;    private fun hideSystemUi() {&#10;        val decorView = window.decorView&#10;        decorView.systemUiVisibility = (View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY&#10;                or View.SYSTEM_UI_FLAG_LAYOUT_STABLE&#10;                or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION&#10;                or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN&#10;                or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION&#10;                or View.SYSTEM_UI_FLAG_FULLSCREEN)&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Mate11App() {&#10;    val navController = rememberNavController()&#10;    NavHost(navController = navController, startDestination = &quot;welcome&quot;) {&#10;        composable(&quot;welcome&quot;) {&#10;            WelcomeScreen(&#10;                onTableSelected = { table -&gt;&#10;                    navController.navigate(&quot;table/$table&quot;)&#10;                },&#10;                onStoryMode = { navController.navigate(&quot;story&quot;) },&#10;                onChapterSelect = { navController.navigate(&quot;chapter&quot;) }&#10;            )&#10;        }&#10;        composable(&#10;            route = &quot;table/{table}&quot;,&#10;            arguments = listOf(navArgument(&quot;table&quot;) { type = NavType.IntType })&#10;        ) { backStackEntry -&gt;&#10;            val table = backStackEntry.arguments?.getInt(&quot;table&quot;) ?: 2&#10;            TableScreen(table = table, onBack = { navController.popBackStack() })&#10;        }&#10;        composable(&quot;story&quot;) {&#10;            StoryModeScreen(onBack = { navController.popBackStack() })&#10;        }&#10;        composable(&quot;chapter&quot;) {&#10;            ChapterSelectScreen(onBack = { navController.popBackStack() })&#10;        }&#10;    }&#10;}&#10;&#10;// ... Mate11Theme y otras pantallas se definen en otros archivos ..." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/test/java/com/example/mate11/WelcomeScreenTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/test/java/com/example/mate11/WelcomeScreenTest.kt" />
              <option name="originalContent" value="package com.example.mate11&#10;&#10;import androidx.compose.ui.test.junit4.createComposeRule&#10;import androidx.compose.ui.test.onNodeWithText&#10;import androidx.compose.ui.test.performClick&#10;import org.junit.Rule&#10;import org.junit.Test&#10;&#10;class WelcomeScreenTest {&#10;    @get:Rule&#10;    val composeTestRule = createComposeRule()&#10;&#10;    @Test&#10;    fun testWelcomeScreenButtons() {&#10;        var tableSelected = -1&#10;        var storyModeClicked = false&#10;        var chapterSelectClicked = false&#10;        composeTestRule.setContent {&#10;            WelcomeScreen(&#10;                onTableSelected = { tableSelected = it },&#10;                onStoryMode = { storyModeClicked = true },&#10;                onChapterSelect = { chapterSelectClicked = true }&#10;            )&#10;        }&#10;        // Verifica que el texto principal esté presente&#10;        composeTestRule.onNodeWithText(&quot;¡Bienvenido a Mate11!&quot;).assertExists()&#10;        // Haz click en el botón de la tabla del 2&#10;        composeTestRule.onNodeWithText(&quot;Tabla del 2&quot;).performClick()&#10;        assert(tableSelected == 2)&#10;        // Haz click en Modo Historia&#10;        composeTestRule.onNodeWithText(&quot;Modo Historia&quot;).performClick()&#10;        assert(storyModeClicked)&#10;        // Haz click en Seleccionar Capítulo&#10;        composeTestRule.onNodeWithText(&quot;Seleccionar Capítulo&quot;).performClick()&#10;        assert(chapterSelectClicked)&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.mate11&#10;&#10;import androidx.compose.ui.test.junit4.createComposeRule&#10;import androidx.compose.ui.test.onNodeWithText&#10;import androidx.compose.ui.test.performClick&#10;import org.junit.Rule&#10;import org.junit.Test&#10;&#10;class WelcomeScreenTest {&#10;    @get:Rule&#10;    val composeTestRule = createComposeRule()&#10;&#10;    @Test&#10;    fun testWelcomeScreenButtons() {&#10;        var tableSelected = -1&#10;        var storyModeClicked = false&#10;        var chapterSelectClicked = false&#10;        composeTestRule.setContent {&#10;            WelcomeScreen(&#10;                onTableSelected = { tableSelected = it },&#10;                onStoryMode = { storyModeClicked = true },&#10;                onChapterSelect = { chapterSelectClicked = true }&#10;            )&#10;        }&#10;        // Verifica que el texto principal esté presente&#10;        composeTestRule.onNodeWithText(&quot;¡Bienvenido a Mate11!&quot;).assertExists()&#10;        // Haz click en el botón de la tabla del 2&#10;        composeTestRule.onNodeWithText(&quot;Tabla del 2&quot;).performClick()&#10;        assert(tableSelected == 2)&#10;        // Haz click en Modo Historia&#10;        composeTestRule.onNodeWithText(&quot;Modo Historia&quot;).performClick()&#10;        assert(storyModeClicked)&#10;        // Haz click en Seleccionar Capítulo&#10;        composeTestRule.onNodeWithText(&quot;Seleccionar Capítulo&quot;).performClick()&#10;        assert(chapterSelectClicked)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>